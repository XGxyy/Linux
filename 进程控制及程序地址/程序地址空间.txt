程序地址空间: (进程才占用内存, 程序本身不占用)
	内存地址: 内存区域的编号,每个进程都有一个自己的进程地址空间

创建子进程---父子进程代码共享, 数据独有)
	进程中所访问到的地址实际都是一个虚拟地址
	程序地址空间->进程地址空间->虚拟地址空间
虚拟地址空间: (内存描述符!)
	通过一个结构体描述出一块完整的连续的线性的地址空间
	size/ code_start/code_end/data_start/data_end
	是一个mm_struct结构体---内存描述符,而不是直接操控物理内存

**直接使用物理内存: 内存利用率低, 缺乏内存访问控制

页表: 映射虚拟地址和物理地址的对应关系

操作系统通过虚拟地址空间向进程描述了一个完整的连续的地址空间, 供进程使用, 
但是在物理内存中进程数据的存储采用离散式存储(提高内存利用率), 并使用页表
映射虚拟地址与物理地址的映射关系, 并且在页表中可以实现内存访问控制(标志位
表示内存的访问权限);

**如何通过虚拟地址得到物理地址:
	分段式内存管理/ 分页式内存管理/段页式内存管理
1.分段式内存地址的组成: 段号(段表中的段号查找的物理起始地址) + 段内偏移
	优点: 对程序内存管理比较友好
2.分页式虚拟地址的构成: 页号(找页表中的对应页号中的物理块号) + 页内偏移
	优点: 提高内存利用率
3.段页式虚拟地址的组成: 段号(段内页表的起始地址) + 段内页号 + 页内偏移

操作系统进行的进程调度: 
	例如:多级反馈调度算法: 按照位图的1/0判断是否有pcb优先级
	有很多算法, 多了解
















