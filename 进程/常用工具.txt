yum: 软件包管理工具
	软件安装方法:1.手动源码安装 2.使用工具安装
vim: 
	12种操作模式,常用三种: 普通, 插入, 低行
	普通模式 : 
		1.光标移动:hjkl gg G
		2.复制:yy nyy 
		3.粘贴:p P
		4.删除:x dw D dd ndd
		5.撤销:u返回上一步 ctrl+r回到下一步
		6.其他: gg=G(缩进对齐)  ggdG(全文删除)
gcc/g++: 编译器
	功能:将c/c++高级语言代码翻译成机器可识别代码
	编译过程: 
		预处理: 展开所有代码(宏替换,去除注释等等)
		编译: 语法语义纠错,翻译成汇编代码
		汇编: 将汇编代码翻译成二进制机器可识别指令
		链接: 链接库, 将所有代码合在一起生成可执行程序
	链接库(将已经汇编完成的公共代码拿到生成的可执行程序中)
	静态链接: 将库中的代码直接拷贝到可执行程序中,好处是运行时不依赖库文件,
		但是占用资源较多
	动态链接: 只是记录库中的接口符号位置信息,好处是资源占用冗余小,
		但运行时需要动态库的存在
	gcc默认链接方式是动态链接
gdb: 调试器
	一.功能: 调试一个程序的运行过程
		**linux下程序编译默认生成release版本,不带有调试符,意味着无法调试
	二.生成调试版本的方法:
	1.gcc编译程序时加上-g选项才能添加调试符信息生存debug版本
		(gcc -g main.c -o main)
	2.gdb: 调试程序, 需要将程序的信息,加载到gdb中
		(gdb ./main.c 进入gdb后 运行 file ./main命令)
	三.开始调试:
		加载运行参数:
		r 参数1 参数2
		start (开始逐步调试)
		n (下一步, 但并不跟踪进入函数)
		s (下一步, 跟踪进入函数)
		p 变量 (查看变量数据)
		l 行号(查看 指定行/当前调试行 的附近代码)
		b 行号(向当前文件指定行添加断点)
		b 文件名 : 行号(向指定文件指定行添加断点)
		b 函数名(向指定函数添加断点)
		watch 变量 (变量监控 并添加断点, 当内容发生改变,停止)
		i b (查看断点信息)
		d id (删除指定断点, 默认删除所有)
		c ( 继续运行)
		bt (查看栈的调用信息)
make/Makefile: 项目自动化构建工具
	Makefile: 定义编译规则的普通文件			
	make: 是一个解释程序, 解释Makefile中定义的编译规则  
	执行make命令,这时候make程序会到当前目录下寻找Makefile文件并解释其中规则
	
	如何编写Makefile(编写规则):
		1.写要生成的对象名称(目标对象) : 要生成的对象(依赖对象)    (a:a.c)
		2.tab(制表符)要执行的命令(	gcc a.c -o a)
		**通过目标对象与依赖对象最后一次修改时间,判断目标对象是否需要重新生成
 		**make只找makefile中的第一个目标对象进行生成, 完毕之后直接退出
		**all : a b可以生成两个依赖对象,他会在后面编译规则中寻找是否可以生成这
		         个依赖对象生成完毕后追中生成的对象
	预定义变量:1.$@ 要生成的目标对象
		 2.$^ 所有的依赖对象
		 3.$< 依赖对象中的第一个
	    $()引用一个命令,获取执行结果
	    wildcard 获取文件名(src = $(wildcard ./*.c))
	    patsubst 字符串替换(obj = $(patsubst %.c, %.o, $(src)))
		//变量的使用需要使用$()括起来
	clean: rm -rf $(obj) $(bin)//make clean可以直接删除
	
	.PHONY: $(bin)//.PHONY(声明一个伪对象)
	   伪对象: 不管对象是不是最新, 每次都要重新生成
git: 项目版本管理工具(分布式)//svn(集成式版本管理)
	1.git clone git地址
	2.git add test.c
	3.git commit - m"备注"
	4.git push origin master(分支)











