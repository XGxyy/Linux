多线程: 线程概念/线程控制/线程安全/线程池
一.**线程概念**//在传统操作系统上pcb是一个进程,描述一个程序的运行,‪还有一个tcp描述实现线程
在Linux下使用pcb描述实现了程序调度,并且这些pcb共用同一个虚拟地址空间,相较于传
统的pcb更加轻量化,因此也把Linux下的pcb称之为"轻量级进程"
(公用同一个虚拟地址空间的pcb共称为线程组,即进程就是一个线程组)
1.什么是线程:
①在一个程序里的一个执行路线就叫做线程,准确的定义是:线程是"一个进程内部的控制序列"  
②一切进程至少都有一个执行线程
③线程在进程内部运行，本质是在进程地址空间内运行
④在Linux系统中，在CPU眼中，看到的PCB都要比传统的进程更加轻量化
⑤透过进程虚拟地址空间，可以看到进程的大部分资源，将进程资源合理分配给每个执行流，
	就形成了线程执行流
2..进程和线程的区别
进程是系统资源分配的基本单位
线程是cpu调度的基本单位
3.线程间的独有与共享:
独有: 栈, 寄存器, 信号(线程)屏蔽字(线程的阻塞信号集合), ermo, 标识符
共享: 虚拟地址空间(代码段和数据段), 文件描述符表, 信号处理方式,工作路径,用户ID,组ID
4.多进程和多线程进行多任务处理的优缺点:
	多线程:
$优点
①线程间通信更加方便灵活(全局变量,函数传参)
②线程的创建与销毁成本更低
③线程间的调度成本更低
$缺点
异常和某些系统调用针对的是整个进程
	多进程:
$优点
具有独立性,更加稳定,健壮


二.线程控制
(接口是一套库函数-lpthread)
1.线程创建:通过

三.线程安全(多个执行流对同一个临界资源进行访问操作,而不会造成数据的二义性)
1.线程安全的实现:同步+互斥
①互斥: 通过同一时间只有一个执行流能够访问临界资源来保证操作的安全性
②同步: 通过一些条件的判断来实现多个执行对临界资源访问的有序合理性
**互斥的实现:
	互斥锁: 通过一个原子操作的只有0/1的计数器,标记临界资源的访问状态;
	每一个执行流在访问临界资源之前,都需要先进行加锁操作,若有执行流
	已经加锁,则当下的加锁操作则会阻塞当前线程
**同步的实现:
	条件变量: 一个pcb等待队列+向外提供一个使pcb等待以及唤醒的接口

四.生产者与消费者模型
1.解耦合, 生产者模块和消费者模块并不直接交互,都是仅操作线程安全的队列
2.支持忙闲不均, 队列中有多个节点可以起缓冲作用
3.支持并发
**生产者与消费者模型的实现: 一个场所,两种角色,三种关系
	生产者与生产者应该具备互斥关系
	消费者与消费者应该具备互斥关系
	生产者与消费者应该具备同步+互斥关系
**实现一个线程安全的队列+多个角色的执行流
	封装一个阻塞队列类 :
class BlockQueue{
	std::queue<int>  _queue;
	pthread_mutex_t  _mutex;//实现互斥
	int  _capacity;//限制队列中,节点的最大数量
	pthread_cond_t  _cond_pro;//生产者队列
	pthread_cond_t  _cond_con;//消费者队列
public:
	BlockQueue(int  qmax){}//初始化资源
	~BlockQueue{}//释放资源
	bool push(int &data);//插入(入队)
	bool pop(int &data);//删除(出队)
}
















